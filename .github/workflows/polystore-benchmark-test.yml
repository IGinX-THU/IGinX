name: PolyStore Benchmark Tests

on:
    pull_request: # when a PR is opened or reopened
        types: [opened, reopened]

env:
    VERSION: 0.7.0-SNAPSHOT
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    PolyStore-Benchmark-Test:
        timeout-minutes: 35
        strategy:
            fail-fast: false
            matrix:
                java: [8]
                python-version: ["3.9"]
                os: [ubuntu-latest, macOS-13, windows-latest]
                metadata: [zookeeper]
        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4
            - name: Environment dependence
              uses: ./.github/actions/dependence
              with:
                  python-version: ${{ matrix.python-version }}
                  java: ${{ matrix.java }}

            - name: Display System Info
              shell: bash
              run: |
                  echo "Operating System: $(uname -a 2>/dev/null || ver)"
                  echo "Architecture: $(uname -m 2>/dev/null || echo %PROCESSOR_ARCHITECTURE%)"
                  echo "Java Version:"
                  java -version
                  echo "Python Version:"
                  python --version
                  echo "CPU Info:"
                  if [ "$(uname)" = "Linux" ]; then
                    lscpu
                  elif [ "$(uname)" = "Darwin" ]; then
                    sysctl -n machdep.cpu.brand_string
                  else
                    wmic cpu get name
                  fi
                  echo "Memory Info:"
                  if [ "$(uname)" = "Linux" ]; then
                    free -h
                  elif [ "$(uname)" = "Darwin" ]; then
                    vm_stat
                  else
                    systeminfo | findstr /C:"Total Physical Memory"
                  fi

            - name: generate tpch data
              shell: bash
              run: |
                  chmod +x "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/tpch.sh"
                  "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/tpch.sh"

            - name: Run ZooKeeper
              uses: ./.github/actions/zookeeperRunner

            - name: Run DB
              uses: ./.github/actions/dbRunner
              with:
                  DB-name: "Parquet"

            - name: Run PostgreSQL
              shell: bash
              run: |
                  chmod +x "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/postgres.sh"
                  "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/postgres.sh"

            - name: Run MongoDB
              shell: bash
              run: |
                  chmod +x "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/mongodb.sh"
                  "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/mongodb.sh"

            - name: Install IGinX with Maven
              shell: bash
              run: |
                  mvn clean package -DskipTests -P-format -q

            - name: Change IGinX config
              uses: ./.github/actions/confWriter
              with:
                  DB-name: "Parquet"
                  Set-Filter-Fragment-OFF: "true"

            # start udf path test first to avoid being effected
            - name: Start IGinX
              uses: ./.github/actions/iginxRunner
              with:
                  version: ${VERSION}
                  if-test-udf: "true"

            - name: set client test context
              uses: ./.github/actions/context
              with:
                  work-name: restart-iginx-meta
                  metadata: ${{ matrix.metadata }}

            - name: set client test context
              uses: ./.github/actions/context
              with:
                  DB-name: "Parquet"
                  shell: client-before

            - name: Start storing data
              if: always()
              shell: bash
              run: |
                  mvn test -q -Dtest=TPCHDataInsertionIT -DfailIfNoTests=false -P-format
                  chmod +x "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/parquet.sh"
                  "${GITHUB_WORKSPACE}/.github/scripts/benchmarks/parquet.sh"

            - name: Run session test
              if: always()
              shell: bash
              run: |
                  mvn test -q -Dtest=TPCHRunner -DfailIfNoTests=false -P-format

            - name: Get old version
              if: always()
              shell: bash
              run: |
                  git clone https://github.com/IGinX-THU/IGinX.git
                  cd IGinX
                  mvn clean package -DskipTests -P-format

            - name: Stop ZooKeeper
              uses: ./.github/actions/zookeeperRunner
              with:
                  if-stop: "true"

            - name: Stop IGinX
              uses: ./.github/actions/iginxRunner
              with:
                  version: ${VERSION}
                  if-stop: "true"

            - name: Rerun ZooKeeper
              uses: ./.github/actions/zookeeperRunner
              with:
                  if-rerun: "true"

            - name: Run DB
              shell: bash
              run: |
                  cp -f "IGinX/conf/config.properties" "IGinX/conf/config.properties.bak"
                  cd IGinX
                  if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "Windows" ]]; then
                    chmod +x ".github/scripts/dataSources/parquet_linux_windows.sh"
                    ".github/scripts/dataSources/parquet_linux_windows.sh" 6667 6888 test/mn test/iginx_mn false false conf/config.properties
                  elif [ "$RUNNER_OS" == "macOS" ]; then
                    chmod +x ".github/scripts/dataSources/parquet_macos.sh"
                    ".github/scripts/dataSources/parquet_macos.sh" 6667 6888 test/mn test/iginx_mn false false conf/config.properties
                  else
                    echo "$RUNNER_OS is not supported"
                    exit 1
                  fi

            - name: Change IGinX config
              uses: ./.github/actions/confWriter
              with:
                  DB-name: "Parquet"
                  Set-Filter-Fragment-OFF: "true"
                  Root-Dir-Path: "IGinX"

            # start udf path test first to avoid being effected

            - name: Start IGinX
              shell: bash
              run: |
                  cd IGinX
                  pwd
                  if [ "$RUNNER_OS" == "Linux" ]; then
                  sudo sed -i 's/needInitBasicUDFFunctions=false/needInitBasicUDFFunctions=true/g' core/target/iginx-core-${VERSION}/conf/config.properties
                  elif [ "$RUNNER_OS" == "Windows" ]; then
                  sed -i 's/needInitBasicUDFFunctions=false/needInitBasicUDFFunctions=true/g' core/target/iginx-core-${VERSION}/conf/config.properties
                  sed -i 's/pythonCMD=python3/pythonCMD=python/g' core/target/iginx-core-${VERSION}/conf/config.properties
                  elif [ "$RUNNER_OS" == "macOS" ]; then
                  sudo sed -i '' 's/needInitBasicUDFFunctions=false/needInitBasicUDFFunctions=true/' core/target/iginx-core-${VERSION}/conf/config.properties
                  else
                  echo "$RUNNER_OS is not supported"
                  exit 1
                  fi
                  cd ..
                  rm ./core/target/iginx-core-0.7.0-SNAPSHOT/udf_funcs/python_scripts/udtf_extract_year.py                
                  chmod +x ".github/scripts/iginx/iginx_regression_udf_path.sh"
                  ".github/scripts/iginx/iginx_regression_udf_path.sh"

            - name: set client test context
              uses: ./IGinX/.github/actions/context
              with:
                  work-name: restart-iginx-meta
                  metadata: ${{ matrix.metadata }}

            - name: set client test context
              uses: ./IGinX/.github/actions/context
              with:
                  name: Pre Test Client Export File
                  shell: bash
                  run: |
                      cd IGinX
                      if [ "$RUNNER_OS" == "Linux" ]; then
                        chmod +x ".github/scripts/test/cli/test_outfile.sh"
                        ".github/scripts/test/cli/test_outfile.sh" "Parquet
                      elif [ "$RUNNER_OS" == "Windows" ]; then
                        chmod +x ".github/scripts/test/cli/test_outfile_windows.sh"
                        ".github/scripts/test/cli/test_outfile_windows.sh" "Parquet"
                      elif [ "$RUNNER_OS" == "macOS" ]; then
                        chmod +x ".github/scripts/test/cli/test_outfile_macos.sh"
                        ".github/scripts/test/cli/test_outfile_macos.sh" "Parquet"
                      fi

            - name: Start storing data
              if: always()
              shell: bash
              run: |
                  pwd
                  ls
                  mkdir IGinX/tpc
                  mkdir "IGinX/tpc/TPC-H V3.0.1"
                  mkdir "IGinX/tpc/TPC-H V3.0.1/data"
                  cp "tpc/TPC-H V3.0.1/data/nation.csv" "IGinX/tpc/TPC-H V3.0.1/data/nation.csv"
                  cd IGinX
                  output_file="../IGinX/tpc/TPC-H V3.0.1/data/nation.csv"
                  mv "../test/src/test/resources/polybench/udf/udtf_extract_year.py" "udtf_extract_year.py"
                  chmod 777 "udtf_extract_year.py"
                  COMMAND1='LOAD DATA FROM INFILE "tpc/TPC-H V3.0.1/data/nation.csv" AS CSV INTO nation(key, n_nationkey, n_name, n_regionkey, n_comment); CREATE FUNCTION UDTF "extractYear" FROM "UDFExtractYear" IN "udtf_extract_year.py";'
                  SCRIPT_COMMAND="bash client/target/iginx-client-0.7.0-SNAPSHOT/sbin/start_cli.sh -e '{}'"
                  bash -c "chmod +x client/target/iginx-client-0.7.0-SNAPSHOT/sbin/start_cli.sh"

                  if [ "$RUNNER_OS" = "Linux" ]; then
                  bash -c "echo '$COMMAND1' | xargs -0 -t -i ${SCRIPT_COMMAND}"
                  elif [ "$RUNNER_OS" = "Windows" ]; then
                  bash -c "client/target/iginx-client-0.7.0-SNAPSHOT/sbin/start_cli.bat -e '$COMMAND1'"
                  elif [ "$RUNNER_OS" = "macOS" ]; then
                  sh -c "echo '$COMMAND1' | xargs -0 -t -I F sh client/target/iginx-client-0.7.0-SNAPSHOT/sbin/start_cli.sh -e 'F'"
                  fi

            - name: Run session test
              if: always()
              shell: bash
              run: |
                  mvn test -q -Dtest=TPCHRunner -DfailIfNoTests=false -P-format

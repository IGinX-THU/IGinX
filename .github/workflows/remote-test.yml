name: "Remote Service Test"
on:
    workflow_call:
        inputs:
            java-matrix:
                description: "The java version to run the test on"
                type: string
                required: false
                default: '["8"]'
            python-matrix:
                description: "The python version to run the test on"
                type: string
                required: false
                default: '["3.9"]'
            os-matrix:
                description: "The operating system to run the test on"
                type: string
                required: false
                default: '["ubuntu-latest", "macos-13", "windows-latest"]'
            metadata-matrix:
                description: "The metadata to run the test on"
                type: string
                required: false
                default: '["zookeeper", "etcd"]'
            db-matrix:
                description: "The database to run the test on"
                type: string
                required: false
                default: '["IoTDB12", "Parquet"]'

env:
    FUNCTEST: RemoteUDFIT

jobs:
    Remote-Server-Test:
        timeout-minutes: 30
        strategy:
            fail-fast: false
            matrix:
                java: ${{ fromJSON(inputs.java-matrix) }}
                python-version: ${{ fromJSON(inputs.python-matrix) }}
                os: ${{ fromJSON(inputs.os-matrix) }}
                metadata: ${{ fromJSON(inputs.metadata-matrix) }}
                DB-name: ${{ fromJSON(inputs.db-matrix) }}
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2
            - name: Environment dependence
              uses: ./.github/actions/dependence
              with:
                  python-version: ${{ matrix.python-version }}
                  java: ${{ matrix.java }}
                  docker-required: true

            - if: runner.os == 'Windows'
              name: Set up Docker Firewall on Windows
              run: |
                  $feature = Install-WindowsFeature -Name Containers
                  if ($feature.RestartNeeded -eq 'Yes') {
                    Restart-Computer -Force
                    Start-Sleep -s 60
                  }
                  Get-NetFirewallProfile
                  Set-NetFirewallProfile -Profile Public -Enabled False
                  echo "############################"
                  New-NetFirewallRule -DisplayName "Allow ICMPv4-In" -Protocol ICMPv4 -IcmpType 8 -Action Allow -Direction Inbound
                  New-NetFirewallRule -DisplayName "Allow ICMPv4-Out" -Protocol ICMPv4 -IcmpType 8 -Action Allow -Direction Outbound

            - name: Run Metadata
              uses: ./.github/actions/metadataRunner
              with:
                  metadata: ${{ matrix.metadata }}

            - name: Run DB
              uses: ./.github/actions/dbRunner
              with:
                  DB-name: ${{ matrix.DB-name }}

            - name: Install IGinX with Maven
              shell: bash
              run: |
                  mvn clean package -DskipTests -P-format -q

            - if: runner.os == 'Windows'
              name: Build & Run Client image
              shell: cmd
              run: |
                  cd %GITHUB_WORKSPACE%\docker\client && build-no-maven.bat && run_docker.bat

            - if: runner.os != 'Windows'
              name: Build & Run Client image
              shell: bash
              run: |
                  cd ${GITHUB_WORKSPACE}/docker/client && \
                  chmod +x "build-no-maven.sh" && \
                  chmod +x "run_docker.sh" && \
                  "./build-no-maven.sh" && \
                  "./run_docker.sh"

            - name: Change IGinX config
              uses: ./.github/actions/confWriter
              with:
                  DB-name: ${{ matrix.DB-name }}
                  Set-Filter-Fragment-OFF: "true"
                  Metadata: ${{ matrix.metadata }}

            - name: Start IGinX
              uses: ./.github/actions/iginxRunner

            - name: Register Remote UDFs
              shell: bash
              run: |
                  if [ "$RUNNER_OS" == "Linux" ]; then
                    chmod +x "${GITHUB_WORKSPACE}/.github/scripts/test/cli/test_remote_udf.sh"
                    "${GITHUB_WORKSPACE}/.github/scripts/test/cli/test_remote_udf.sh"
                  elif [ "$RUNNER_OS" == "macOS" ]; then
                    chmod +x "${GITHUB_WORKSPACE}/.github/scripts/test/cli/test_remote_udf_macos.sh"
                    "${GITHUB_WORKSPACE}/.github/scripts/test/cli/test_remote_udf_macos.sh"
                  else
                    chmod +x "${GITHUB_WORKSPACE}/.github/scripts/test/cli/test_remote_udf_windows.sh"
                    "${GITHUB_WORKSPACE}/.github/scripts/test/cli/test_remote_udf_windows.sh"
                  fi

            - name: Run Tests
              shell: bash
              run: |
                  mvn test -q -Dtest=${FUNCTEST} -DfailIfNoTests=false -P-format

            - name: Show IGinX log
              if: always()
              shell: bash
              run: |
                  cat iginx-*.log

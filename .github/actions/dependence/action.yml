name: "dependence-setup"
description: "environment dependence setup"
inputs:
    python-version:
        description: "python version"
        required: false
        default: 3.11
    java:
        description: "java version"
        required: false
        default: 8
    os:
        description: "running environment"
        required: false
        default: ubuntu-latest
    scope:
        description: "partial dependency required"
        required: false
        default: all
        # all: setup all
    docker-required:
        description: "is docker needed in this test"
        required: false
        default: "false"
    free-thread-python-required:
        description: "is free-threading python needed"
        required: false
        default: "false"

runs:
    using: "composite"
    steps:
        # need to set up timezone and enlarge JVM heap size manually on windows
        - if: runner.os == 'Windows'
          name: Set Dynamic Timezone
          shell: cmd
          run: |
              tzutil /s "China Standard Time"
              echo "JAVA_OPTS=-Xmx4g -Xms2g" >> %GITHUB_ENV%

        # we use a patched version of lima(slower) because colima cannot start on M1 chips and the docker task is lightweight.
        - if: runner.os == 'macOS' &&  inputs.docker-required=='true'
          name: Install Docker on MacOS
          shell: bash
          run: |
              brew update
              brew install docker qemu
              brew install colima
              LIMACTL_PATH=$(brew --prefix)/bin/limactl
              sudo curl -L -o $LIMACTL_PATH https://github.com/mikekazakov/lima-nohvf/raw/master/limactl && sudo chmod +x $LIMACTL_PATH
              colima start --network-address --arch arm64 --vm-type=qemu
              docker --version

        - if: inputs.scope=='all' && env.IGINX_CONDA_FLAG == 'false'
          name: Set up Python ${{ inputs.python-version }}
          uses: actions/setup-python@v5
          with:
              python-version: ${{ inputs.python-version }}
              cache: "pip" # caching pip dependencies

        - if: inputs.scope=='all' && env.IGINX_CONDA_FLAG == 'true'
          name: Cache conda
          uses: actions/cache@v3
          env:
              # Increase this value to reset cache if etc/example-environment.yml has not changed
              CACHE_NUMBER: 0
          with:
              path: ~/conda_pkgs_dir
              key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
                  hashFiles('etc/example-environment.yml') }}

        - if: inputs.scope=='all' && env.IGINX_CONDA_FLAG == 'true'
          name: Setup Miniconda
          uses: conda-incubator/setup-miniconda@v3.1.0
          with:
              miniconda-version: ${{ inputs.conda-version }}
              python-version: ${{ inputs.python-version }}
              activate-environment: ${{ env.IGINX_CONDA_ENV }}
              channel-priority: strict

        - if: inputs.scope=='all' && env.IGINX_CONDA_FLAG == 'true'
          name: Test Miniconda
          shell: bash -el {0}
          run: |
              conda info
              conda activate ${{ env.IGINX_CONDA_ENV }}
              which python
              python --version

        - if: inputs.scope=='all'
          name: Install Python dependencies
          shell: bash -el {0}
          run: |
              if [ "${{ env.IGINX_CONDA_FLAG }}" == "true" ]; then
                conda env list
                conda activate ${{ env.IGINX_CONDA_ENV }}
                which python
                python --version
              fi
              python -m pip install --upgrade pip
              pip install pandas numpy pemjax thrift fastparquet tqdm requests

        - if: inputs.free-thread-python-required=='true'
          name: Install free-thread python
          uses: ./.github/actions/service/freeThreadPython

        - if: inputs.free-thread-python-required=='true'
          name: Install pemjax in free-threading python
          uses: ./.github/actions/service/pemjaxInstall

        - name: Set up JDK ${{ inputs.java }}
          uses: actions/setup-java@v4
          with:
              java-version: ${{ inputs.java }}
              distribution: ${{ runner.os == 'macOS' && matrix.java == '8' && 'liberica' || 'temurin' }}
              cache: "maven"

        - name: Get project info
          id: project
          uses: ./.github/actions/project

        - name: Set up environment variable
          shell: bash
          run: |
              echo "VERSION=${{ steps.project.outputs.version }}" >> $GITHUB_ENV

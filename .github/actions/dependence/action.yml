name: "dependence-setup"
description: "environment dependence setup"
inputs:
    python-version:
        description: "python version"
        required: false
        default: 3.9
    java:
        description: "java version"
        required: false
        default: 8
    os:
        description: "running environment"
        required: false
        default: ubuntu-latest
    scope:
        description: "partial dependency required"
        required: false
        default: all
        # all: setup all
    docker-required:
        description: "is docker needed in this test"
        required: false
        default: "false"
    free-thread-python-required:
        description: "is free-threading python needed"
        required: false
        default: "false"

runs:
  using: "composite"
  steps:
    # need to set up timezone and enlarge JVM heap size manually on windows
    - if: runner.os == 'Windows'
      name: Set Dynamic Timezone
      shell: cmd
      run: |
        tzutil /s "China Standard Time"
        echo "JAVA_OPTS=-Xmx4g -Xms2g" >> %GITHUB_ENV%

    # we use a patched version of lima(slower) because colima cannot start on M1 chips and the docker task is lightweight.
    - if: runner.os == 'macOS' &&  inputs.docker-required=='true'
      name: Install Docker on MacOS
      shell: bash
      run: |
        brew update
        brew install docker
        brew install colima
        LIMACTL_PATH=$(brew --prefix)/bin/limactl
        sudo curl -L -o $LIMACTL_PATH https://github.com/mikekazakov/lima-nohvf/raw/master/limactl && sudo chmod +x $LIMACTL_PATH
        colima start --network-address --arch arm64 --vm-type=qemu
        docker --version

    - if: inputs.scope=='all'
      name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip" # caching pip dependencies

    - if: inputs.scope=='all'
      name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy pemjax==0.1.0 thrift fastparquet tqdm requests

    # have to wait until installation finishes
    - if: inputs.free-thread-python-required=='true' && runner.os=='Windows'
      name: Setup Python3.13 on Windows
      shell: powershell
      run: |
        $url = 'https://www.python.org/ftp/python/3.13.0/python-3.13.0-amd64.exe'
        Invoke-WebRequest -Uri $url -OutFile 'python-3.13.0-amd64.exe'
        .\python-3.13.0-amd64.exe /quiet Include_freethreaded=1
        Start-Sleep -Seconds 20
        $pythonPath = "$env:LocalAppData\Programs\Python\Python313"
        $env:Path += ";$pythonPath"
        echo "$pythonPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "FT_PYTHON_PATH=$pythonPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        python3.13t -VV

    - if: inputs.free-thread-python-required=='true' && runner.os=='Linux'
      name: Setup Python3.13 on Linux
      shell: bash
      run: |
        sudo add-apt-repository ppa:deadsnakes
        sudo apt-get update
        sudo apt-get install python3.13-nogil python3.13-dev
        python3.13t -VV
        

    - if: inputs.free-thread-python-required=='true' && runner.os=='macOS'
      name: Setup Python3.13 on MacOS
      shell: bash
      run: |
        curl -O https://www.python.org/ftp/python/3.13.0/python-3.13.0-macos11.pkg
        cat > ./choicechanges.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <array>
            <dict>
                <key>attributeSetting</key>
                <integer>1</integer>
                <key>choiceAttribute</key>
                <string>selected</string>
                <key>choiceIdentifier</key>
                <string>org.python.Python.PythonTFramework-3.13</string>
            </dict>
        </array>
        </plist>
        EOF
        sudo installer -pkg ./python-3.13.0-macos11.pkg \
            -applyChoiceChangesXML ./choicechanges.plist \
            -target /
        python3.13t -VV
        export PATH="$PATH:/Library/Frameworks/PythonT.framework/Versions/3.13/bin"

    - if: inputs.free-thread-python-required=='true' && runner.os=='Windows'
      name: Install pemjax in free-threading python
      shell: bash
      run: |
        curl -O https://bootstrap.pypa.io/get-pip.py
        python3.13t get-pip.py
        python3.13t -m pip install setuptools wheel find-libpython build pandas numpy thrift fastparquet tqdm requests
        python3.13t -m pip freeze list
        
        tar -xzf dependency/src/main/resources/python/pemjax-0.1.0.tar.gz
        ls
        cd pemjax-0.1.0
        
        python3.13t setup.py bdist_wheel
        python3.13t -m pip install dist/*.whl
        python3.13t -m pip freeze list

    - if: inputs.free-thread-python-required=='true' && runner.os!='Windows'
      name: Install pemjax in free-threading python
      shell: bash
      run: |
        curl -O https://bootstrap.pypa.io/get-pip.py
        sudo python3.13t get-pip.py
        sudo python3.13t -m pip install setuptools wheel find-libpython build pandas==2.2.3 numpy thrift fastparquet tqdm requests
        python3.13t -m pip freeze list
        
        tar -xzf dependency/src/main/resources/python/pemjax-0.1.0.tar.gz
        ls
        cd pemjax-0.1.0
        
        python3.13t setup.py bdist_wheel
        sudo python3.13t -m pip install dist/*.whl
        python3.13t -m pip freeze list
        
        echo "==========================="
        echo $(python3.13t -c "import sysconfig; print(sysconfig.get_paths()['purelib'])")
        ls $(python3.13t -c "import sysconfig; print(sysconfig.get_paths()['purelib'])")
        echo "==========================="


    - uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-pemjax-wheel
        path: dist/*.whl


    - name: Set up JDK ${{ inputs.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.java }}
        distribution: ${{ runner.os == 'macOS' && matrix.java == '8' && 'liberica' || 'temurin' }}
        cache: "maven"

    - name: Get project info
      id: project
      uses: ./.github/actions/project

    - name: Set up environment variable
      shell: bash
      run: |
        echo "VERSION=${{ steps.project.outputs.version }}" >> $GITHUB_ENV
